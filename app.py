import streamlit as st
import math
from langchain_google_genai import ChatGoogleGenerativeAI
from prompt import get_response

# H√†m t√≠nh t·ªï h·ª£p
def combination(n, k):
    return math.comb(n, k)

# H√†m t√≠nh ch·ªânh h·ª£p
def permutation(n, k):
    return math.perm(n, k)

st.set_page_config(layout="wide")
st.sidebar.markdown("<h1 style='text-align: center; color: #FF6347;'>T√≠nh To√°n Vui!</h1>", unsafe_allow_html=True)


st.sidebar.markdown("<h4 style='text-align: center; color: #4682B4;'>Ch·ªçn m·ªôt t√≠nh nƒÉng:</h4>", unsafe_allow_html=True)

# L∆∞u tr·∫°ng th√°i c·ªßa t√≠nh nƒÉng ƒë√£ ch·ªçn v√†o session_state
if "type_math" not in st.session_state:
    st.session_state.type_math = ""

# S·ª≠ d·ª•ng c√°c button l·ªõn h∆°n cho c√°c t√≠nh nƒÉng
col1, col2, col3 = st.sidebar.columns([1, 1, 1])
with col1:
    if st.button("üé≤ Ho√°n v·ªã", key="hoan_vi"):
        st.session_state.type_math = "hv"
with col2:
    if st.button("üî¢ T·ªï h·ª£p", key="to_hop"):
        st.session_state.type_math = "th"
with col3:
    if st.button("üìê Ch·ªânh h·ª£p", key="chinh_hop"):
        st.session_state.type_math = "ch"

# Giao di·ªán ch√≠nh v·ªõi hai c·ªôt
col_main, col_chat, col_pad = st.columns([1, 5, 1])

# N·ªôi dung c·ªôt b√™n ph·∫£i (n∆°i hi·ªÉn th·ªã chat v√† gi·ªõi thi·ªáu h·ªá th·ªëng)
with col_chat:
    st.markdown("<h1 style='text-align: center; color: #4682B4;'>Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá Th·ªëng T√≠nh To√°n!</h1>",
                unsafe_allow_html=True)
    # N√∫t gi·ªõi thi·ªáu h·ªá th·ªëng v√† th√¥ng ƒëi·ªáp ch√†o m·ª´ng
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    if st.button("üì¢ Gi·ªõi Thi·ªáu H·ªá Th·ªëng"):
        st.write(
            "Ch√†o c√°c b·∫°n! ƒê√¢y l√† h·ªá th·ªëng gi√∫p b·∫°n t√≠nh to√°n ho√°n v·ªã, t·ªï h·ª£p v√† ch·ªânh h·ª£p m·ªôt c√°ch d·ªÖ d√†ng v√† vui nh·ªôn.")

    # Nh·∫≠p s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠
    n = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ (n)", min_value=1, step=1)
    if st.session_state.type_math != "hv":
        # Nh·∫≠p s·ªë ph·∫ßn t·ª≠ ch·ªçn
        k = st.number_input("Nh·∫≠p s·ªë ph·∫ßn t·ª≠ ch·ªçn (k)", min_value=1, max_value=n, step=1)
    else:
        k = None
    if st.session_state.type_math == "th":
        st.write(f"T√≠nh C({n}, {k}) ") #{combination(n, k)}
    if st.session_state.type_math == "hv":
        st.write(f"T√≠nh P({n}) ")
    if st.session_state.type_math == "ch":
        st.write(f"T√≠nh A({n}, {k})")

    # N√∫t m√¥ t·∫£ ƒë·ªÉ l·∫•y k·∫øt qu·∫£ m√¥ t·∫£ t·ª´ h·ªá th·ªëng ChatGoogleGenerativeAI
    gen_des = st.button("M√¥ t·∫£", key="mota")
    if gen_des:
        response = get_response(st.session_state.type_math, n, k)
        st.write(response)

# Hi·ªÉn th·ªã n·ªôi dung h∆∞·ªõng d·∫´n trong sidebar d·ª±a tr√™n t√≠nh nƒÉng ƒë√£ ch·ªçn
if st.session_state.type_math == "hv":
    st.sidebar.write("# B·∫°n ƒë√£ ch·ªçn t√≠nh nƒÉng Ho√°n v·ªã üé≤")
    st.sidebar.markdown("### Ho√°n V·ªã")
    st.sidebar.markdown("- Ho√°n v·ªã l√† c√°ch s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠.")
    st.sidebar.markdown("S·ªë ho√°n v·ªã c·ªßa n ph·∫ßn t·ª≠:")
    st.sidebar.latex(r'''
        P(n) = n!
    ''')
    result = math.factorial(n)
    st.sidebar.write(f"K·∫øt qu·∫£: Ho√°n v·ªã c·ªßa {n} ph·∫ßn t·ª≠ l√†: {result}")
elif st.session_state.type_math == "th":
    st.sidebar.write("# B·∫°n ƒë√£ ch·ªçn t√≠nh nƒÉng T·ªï h·ª£p üî¢")
    st.sidebar.markdown("### T·ªï H·ª£p")
    st.sidebar.markdown("- T·ªï h·ª£p l√† c√°ch ch·ªçn c√°c ph·∫ßn t·ª≠ m√† kh√¥ng quan t√¢m ƒë·∫øn th·ª© t·ª±.")
    st.sidebar.markdown("T·ªï h·ª£p c·ªßa n ph·∫ßn t·ª≠ ch·ªçn k ph·∫ßn t·ª≠:")
    st.sidebar.latex(r'''
        C(n, k) = \binom{n}{k} = \frac{n!}{k!(n-k)!}
    ''')
    result = combination(n, k)
    st.sidebar.write(f"K·∫øt qu·∫£: T·ªï h·ª£p c·ªßa {n} ph·∫ßn t·ª≠ ch·ªçn {k} l√†: {result}")
elif st.session_state.type_math == "ch":
    st.sidebar.write("# B·∫°n ƒë√£ ch·ªçn t√≠nh nƒÉng Ch·ªânh h·ª£p üìê")
    st.sidebar.markdown("### Ch·ªânh H·ª£p")
    st.sidebar.markdown("- Ch·ªânh h·ª£p l√† c√°ch ch·ªçn c√°c ph·∫ßn t·ª≠ m√† c√≥ quan t√¢m ƒë·∫øn th·ª© t·ª±.")
    st.sidebar.markdown("Ch·ªânh h·ª£p c·ªßa n ph·∫ßn t·ª≠ ch·ªçn k ph·∫ßn t·ª≠:")
    st.sidebar.latex(r'''
        A(n, k) = \frac{n!}{(n-k)!}
    ''')
    result = permutation(n, k)
    st.sidebar.write(f"K·∫øt qu·∫£: Ch·ªânh h·ª£p c·ªßa {n} ph·∫ßn t·ª≠ ch·ªçn {k} l√†: {result}")