import streamlit as st
import math
import json
from prompt import get_response, get_solve, get_quiz_questions, get_explanation_for_answer


# H√†m t√≠nh t·ªï h·ª£p v√† ch·ªânh h·ª£p
def combination(n, k):
    return math.comb(n, k)


def permutation(n, k):
    return math.perm(n, k)


# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="EasyMath",
    page_icon="üìä",
    layout="wide"
)

# Sidebar: ti√™u ƒë·ªÅ v√† l·ª±a ch·ªçn t√≠nh nƒÉng
st.sidebar.markdown("<h2 style='text-align: center; color: #FF6347;'>EasyMath</h2>", unsafe_allow_html=True)
st.sidebar.markdown("---")
st.sidebar.markdown("<h4 style='text-align: center; color: #4682B4;'>Ch·ªçn t√≠nh nƒÉng</h4>", unsafe_allow_html=True)
with st.sidebar:
    # 1. M√¥ t·∫£ b√†i to√°n ho√°n v·ªã
    col_text, col_button = st.columns([1, 1])
    col_text.markdown("1. M√¥ t·∫£ b√†i to√°n ho√°n v·ªã")
    if col_button.button("üé≤ Ho√°n v·ªã", key="hoan_vi"):
        st.session_state.type_math = "hv"

    # 2. M√¥ t·∫£ b√†i to√°n t·ªï h·ª£p
    col_text, col_button = st.columns([1, 1])
    col_text.markdown("2. M√¥ t·∫£ b√†i to√°n t·ªï h·ª£p")
    if col_button.button("üî¢ T·ªï h·ª£p", key="to_hop"):
        st.session_state.type_math = "th"

    # 3. M√¥ t·∫£ b√†i to√°n ch·ªânh h·ª£p
    col_text, col_button = st.columns([1, 1])
    col_text.markdown("3. M√¥ t·∫£ b√†i to√°n ch·ªânh h·ª£p")
    if col_button.button("üìê Ch·ªânh h·ª£p", key="chinh_hop"):
        st.session_state.type_math = "ch"

    # 4. H∆∞·ªõng d·∫´n gi·∫£i b√†i to√°n
    col_text, col_button = st.columns([1, 1])
    col_text.markdown("4. H∆∞·ªõng d·∫´n gi·∫£i b√†i to√°n")
    if col_button.button("‚ùì H∆∞·ªõng d·∫´n gi·∫£i b√†i", key="huong_dan"):
        st.session_state.type_math = "solve"

    # 5. B√†i ki·ªÉm tra
    col_text, col_button = st.columns([1, 1])
    col_text.markdown("5. B√†i ki·ªÉm tra")
    if col_button.button("üìù T·∫°o b√†i ki·ªÉm tra", key="quiz"):
        st.session_state.type_math = "quiz"
        # Reset quiz data when switching to quiz mode from another mode
        if "quiz_questions" in st.session_state:
            del st.session_state.quiz_questions
        if "user_answers" in st.session_state:
            del st.session_state.user_answers
        if "quiz_submitted" in st.session_state:
            del st.session_state.quiz_submitted
        if "quiz_score" in st.session_state:
            del st.session_state.quiz_score
        if "question_explanations" in st.session_state:
            del st.session_state.question_explanations

# Kh·ªüi t·∫°o tr·∫°ng th√°i c·ªßa t√≠nh nƒÉng
if "type_math" not in st.session_state:
    st.session_state.type_math = ""

# Ph·∫ßn ch√≠nh: ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu h·ªá th·ªëng
st.markdown("<h1 style='text-align: center; color: #4682B4;'>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Easy Math!</h1>", unsafe_allow_html=True)

# Hi·ªÉn th·ªã gi·ªõi thi·ªáu h·ªá th·ªëng khi nh·∫•n n√∫t "Gi·ªõi Thi·ªáu"
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if st.button("Gi·ªõi Thi·ªáu"):
    st.info("""
        Easy Math l√† c√¥ng c·ª• h·ªçc to√°n tr·ª±c tuy·∫øn v·ªõi c√¥ng ngh·ªá AI, gi√∫p gi·∫£i th√≠ch c√°c b√†i to√°n ph·ª©c t·∫°p (ho√°n v·ªã, t·ªï h·ª£p, ch·ªânh h·ª£p) th√†nh nh·ªØng m√¥ t·∫£ d·ªÖ hi·ªÉu.
        Ph√°t tri·ªÉn b·ªüi nh√≥m h·ªçc sinh v·ªõi GenAI v√† Python, Easy Math gi√∫p ti·∫øt ki·ªám th·ªùi gian v√† n√¢ng cao hi·ªáu qu·∫£ h·ªçc t·∫≠p.
    """)

    member = {
        "name": "ƒê·∫∑ng Minh Qu√¢n v√† Nguy·ªÖn Nam Kh√°nh",
        "image": "image/team.png"
    }
    cols = st.columns([1, 5, 1])
    with cols[1]:
        st.markdown(f"T√°c gi·∫£")
        st.image(member["image"], width=600)
        st.markdown(f"### {member['name']}")

st.write("---")

# V√πng t√≠nh to√°n: nh·∫≠p s·ªë li·ªáu v√† hi·ªÉn th·ªã ƒë√°p √°n
if st.session_state.type_math in ["hv", "th", "ch"]:
    # Nh·∫≠p n
    n = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ (n):", min_value=1, step=1, value=5)
    k = None
    if st.session_state.type_math in ["th", "ch"]:
        k = st.number_input("Nh·∫≠p s·ªë ph·∫ßn t·ª≠ ch·ªçn (k):", min_value=1, max_value=n, step=1, value=2)

    # Hi·ªÉn th·ªã bi·ªÉu th·ª©c v√† t√≠nh to√°n
    if st.session_state.type_math == "hv":
        st.markdown(f"**T√≠nh ho√°n v·ªã:** P({n}) = {n}!")
        answer = math.factorial(n)
    elif st.session_state.type_math == "th":
        st.markdown(f"**T√≠nh t·ªï h·ª£p:** C({n}, {k})")
        answer = combination(n, k)
    elif st.session_state.type_math == "ch":
        st.markdown(f"**T√≠nh ch·ªânh h·ª£p:** A({n}, {k})")
        answer = permutation(n, k)

    # N√∫t "M√¥ t·∫£" gi·∫£i th√≠ch b√†i to√°n
    if st.button("M√¥ t·∫£", key="mota"):
        response = get_response(st.session_state.type_math, n, k)
        st.session_state.response = response
        st.markdown("### M√¥ t·∫£ b√†i to√°n")
        st.write(response)

    # N√∫t hi·ªÉn th·ªã ƒë√°p √°n (sau khi m√¥ t·∫£ ƒë∆∞·ª£c sinh ra)
    if "response" in st.session_state and st.button("ƒê√°p √°n", key="dap_an"):
        st.markdown("### ƒê√°p √°n")
        st.write(st.session_state.response)
        st.write("**K·∫øt qu·∫£:**", answer)

# V√πng nh·∫≠p ƒë·ªÅ b√†i cho t√≠nh nƒÉng "H∆∞·ªõng d·∫´n gi·∫£i b√†i"
if st.session_state.type_math == "solve":
    st.markdown("### Nh·∫≠p ƒë·ªÅ b√†i c·∫ßn gi·∫£i")
    user_message = st.text_input("Nh·∫≠p ƒë·ªÅ b√†i:", key="user_input", placeholder="Nh·∫≠p n·ªôi dung t·∫°i ƒë√¢y...")
    if user_message:
        response = get_solve(user_message)
        st.session_state.response = response
        st.markdown("### H∆∞·ªõng d·∫´n gi·∫£i b√†i")
        st.write(response)

# Sidebar hi·ªÉn th·ªã h∆∞·ªõng d·∫´n cho t·ª´ng t√≠nh nƒÉng
if st.session_state.type_math == "hv":
    st.sidebar.markdown("---")
    st.sidebar.markdown("# B·∫°n ƒë√£ ch·ªçn: Ho√°n v·ªã üé≤")
    st.sidebar.markdown("**Ho√°n v·ªã** l√† c√°ch s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠. C√¥ng th·ª©c:")
    st.sidebar.latex(r"P(n) = n!")
elif st.session_state.type_math == "th":
    st.sidebar.markdown("---")
    st.sidebar.markdown("# B·∫°n ƒë√£ ch·ªçn: T·ªï h·ª£p üî¢")
    st.sidebar.markdown("**T·ªï h·ª£p** l√† c√°ch ch·ªçn c√°c ph·∫ßn t·ª≠ m√† kh√¥ng quan t√¢m ƒë·∫øn th·ª© t·ª±. C√¥ng th·ª©c:")
    st.sidebar.latex(r"C(n, k) = \binom{n}{k} = \frac{n!}{k!(n-k)!}")
elif st.session_state.type_math == "ch":
    st.sidebar.markdown("---")
    st.sidebar.markdown("# B·∫°n ƒë√£ ch·ªçn: Ch·ªânh h·ª£p üìê")
    st.sidebar.markdown("**Ch·ªânh h·ª£p** l√† c√°ch ch·ªçn c√°c ph·∫ßn t·ª≠ c√≥ quan t√¢m ƒë·∫øn th·ª© t·ª±. C√¥ng th·ª©c:")
    st.sidebar.latex(r"A(n, k) = \frac{n!}{(n-k)!}")
elif st.session_state.type_math == "solve":
    st.sidebar.markdown("---")
    st.sidebar.markdown("# B·∫°n ƒë√£ ch·ªçn: H∆∞·ªõng d·∫´n gi·∫£i b√†i ‚ùì")
    st.sidebar.markdown("""
    **H∆∞·ªõng d·∫´n gi·∫£i b√†i** gi√∫p b·∫°n gi·∫£i c√°c b√†i to√°n ho√°n v·ªã, t·ªï h·ª£p, ch·ªânh h·ª£p.

    Nh·∫≠p ƒë·ªÅ b√†i v√†o √¥ v√† nh·∫≠n h∆∞·ªõng d·∫´n gi·∫£i chi ti·∫øt t·ª´ AI.
    """)
elif st.session_state.type_math == "quiz":
    st.sidebar.markdown("---")
    st.sidebar.markdown("# B·∫°n ƒë√£ ch·ªçn: B√†i ki·ªÉm tra üìù")
    st.sidebar.markdown("""
    **B√†i ki·ªÉm tra** gi√∫p b·∫°n ki·ªÉm tra ki·∫øn th·ª©c v·ªÅ:
    - Ho√°n v·ªã (P)
    - T·ªï h·ª£p (C)
    - Ch·ªânh h·ª£p (A)

    Ch·ªçn lo·∫°i b√†i ki·ªÉm tra, tr·∫£ l·ªùi c√°c c√¢u h·ªèi v√† nh·∫≠n ƒëi·ªÉm s·ªë c√πng gi·∫£i th√≠ch chi ti·∫øt.
    """)

if st.session_state.type_math == "quiz":
    st.markdown("### B√†i ki·ªÉm tra")

    # Kh·ªüi t·∫°o c√°c session state cho quiz
    if "quiz_questions" not in st.session_state:
        st.session_state.quiz_questions = None
    if "user_answers" not in st.session_state:
        st.session_state.user_answers = {}
    if "quiz_submitted" not in st.session_state:
        st.session_state.quiz_submitted = False
    if "quiz_score" not in st.session_state:
        st.session_state.quiz_score = 0
    if "question_explanations" not in st.session_state:
        st.session_state.question_explanations = {}

    # Ch·ªçn lo·∫°i b√†i ki·ªÉm tra
    if not st.session_state.quiz_questions:
        col1, col2 = st.columns(2)
        with col1:
            quiz_type = st.selectbox(
                "Ch·ªçn lo·∫°i b√†i ki·ªÉm tra:",
                options=[
                    ("Ho√°n v·ªã", "hv"),
                    ("T·ªï h·ª£p", "th"),
                    ("Ch·ªânh h·ª£p", "ch"),
                    ("H·ªón h·ª£p", "mix")
                ],
                format_func=lambda x: x[0],
                index=0
            )[1]

        with col2:
            num_questions = st.slider("S·ªë l∆∞·ª£ng c√¢u h·ªèi:", min_value=5, max_value=15, value=10, step=1)

        # N√∫t t·∫°o b√†i ki·ªÉm tra
        if st.button("T·∫°o b√†i ki·ªÉm tra"):
            with st.spinner("ƒêang t·∫°o b√†i ki·ªÉm tra..."):
                try:
                    # Reset t·∫•t c·∫£ d·ªØ li·ªáu b√†i ki·ªÉm tra tr∆∞·ªõc khi t·∫°o m·ªõi
                    st.session_state.quiz_questions = None
                    st.session_state.user_answers = {}
                    st.session_state.quiz_submitted = False
                    st.session_state.quiz_score = 0
                    st.session_state.question_explanations = {}

                    # T·∫°o b√†i ki·ªÉm tra m·ªõi
                    st.session_state.quiz_questions = get_quiz_questions(quiz_type, num_questions)
                    st.success(f"ƒê√£ t·∫°o b√†i ki·ªÉm tra v·ªõi {len(st.session_state.quiz_questions)} c√¢u h·ªèi!")
                    st.rerun()
                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra khi t·∫°o b√†i ki·ªÉm tra: {str(e)}")

    # Hi·ªÉn th·ªã b√†i ki·ªÉm tra
    if st.session_state.quiz_questions and not st.session_state.quiz_submitted:
        st.write("### Tr·∫£ l·ªùi c√°c c√¢u h·ªèi sau:")

        for i, q in enumerate(st.session_state.quiz_questions):
            st.write(f"**C√¢u {i + 1}:** {q['question']}")

            # Input ƒë√°p √°n
            answer_key = f"answer_{i}"
            user_answer = st.text_input(
                "ƒê√°p √°n c·ªßa b·∫°n:",
                key=answer_key,
                value=st.session_state.user_answers.get(i, "")
            )

            # L∆∞u ƒë√°p √°n ng∆∞·ªùi d√πng
            st.session_state.user_answers[i] = user_answer

            st.write("---")

        # N√∫t n·ªôp b√†i
        if st.button("N·ªôp b√†i"):
            st.session_state.quiz_submitted = True

            # T√≠nh ƒëi·ªÉm
            correct_count = 0
            for i, q in enumerate(st.session_state.quiz_questions):
                user_answer = st.session_state.user_answers.get(i, "").strip()
                correct_answer = str(q['answer']).strip()

                if user_answer == correct_answer:
                    correct_count += 1

            st.session_state.quiz_score = correct_count
            st.rerun()

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ sau khi n·ªôp b√†i
    if st.session_state.quiz_questions and st.session_state.quiz_submitted:
        st.write(f"### K·∫øt qu·∫£: {st.session_state.quiz_score}/{len(st.session_state.quiz_questions)} c√¢u ƒë√∫ng")

        for i, q in enumerate(st.session_state.quiz_questions):
            user_answer = st.session_state.user_answers.get(i, "").strip()
            correct_answer = str(q['answer']).strip()

            # X√°c ƒë·ªãnh tr·∫°ng th√°i ƒë√∫ng/sai
            is_correct = user_answer == correct_answer
            status_color = "green" if is_correct else "red"
            status_icon = "‚úì" if is_correct else "‚úó"

            st.write(f"**C√¢u {i + 1}:** {q['question']}")
            st.write(f"- ƒê√°p √°n c·ªßa b·∫°n: **{user_answer}**")
            st.write(f"- ƒê√°p √°n ƒë√∫ng: **{correct_answer}**")
            st.markdown(f"- K·∫øt qu·∫£: <span style='color:{status_color}'>{status_icon}</span>", unsafe_allow_html=True)

            # N√∫t gi·∫£i th√≠ch
            explanation_key = f"explain_{i}"
            if explanation_key not in st.session_state.question_explanations:
                if st.button(f"Xem gi·∫£i th√≠ch", key=f"btn_explain_{i}"):
                    with st.spinner("ƒêang l·∫•y gi·∫£i th√≠ch..."):
                        explanation = get_explanation_for_answer(
                            q['question'],
                            user_answer,
                            correct_answer
                        )
                        st.session_state.question_explanations[explanation_key] = explanation
                        st.rerun()

            # Hi·ªÉn th·ªã gi·∫£i th√≠ch n·∫øu c√≥
            if explanation_key in st.session_state.question_explanations:
                with st.expander("Xem gi·∫£i th√≠ch", expanded=True):
                    st.write(st.session_state.question_explanations[explanation_key])

            st.write("---")

        # N√∫t l√†m b√†i ki·ªÉm tra m·ªõi
        if st.button("L√†m b√†i ki·ªÉm tra m·ªõi"):
            # Reset t·∫•t c·∫£ d·ªØ li·ªáu b√†i ki·ªÉm tra khi l√†m b√†i m·ªõi
            st.session_state.quiz_questions = None
            st.session_state.user_answers = {}
            st.session_state.quiz_submitted = False
            st.session_state.quiz_score = 0
            st.session_state.question_explanations = {}
            st.rerun()